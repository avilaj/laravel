{"version":3,"sources":["../../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_box-sizing.scss","_home.scss","../../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_outer-container.scss","../../../node_modules/bourbon-neat/app/assets/stylesheets/settings/_grid.scss","../../../node_modules/bourbon/app/assets/stylesheets/addons/_clearfix.scss","../../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_span-columns.scss","../../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_private.scss","../../../node_modules/bourbon/app/assets/stylesheets/css3/_flex-box.scss","../../../node_modules/bourbon/app/assets/stylesheets/addons/_prefixer.scss","../../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_row.scss","../../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_fill-parent.scss","../../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_pad.scss","_carousel.scss","_footer.scss","../../../node_modules/bourbon/app/assets/stylesheets/addons/_ellipsis.scss","../../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_omega.scss","../../../node_modules/bourbon-neat/app/assets/stylesheets/functions/_private.scss","_product-displayer.scss","_catalog.scss","app.scss","_checkout.scss"],"names":[],"mappings":"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","file":"app.css","sourcesContent":["@charset \"UTF-8\";\n\n@if $border-box-sizing == true {\n  html { // http://bit.ly/1qk2tVR\n    box-sizing: border-box;\n  }\n\n  * {\n    &,\n    &::after,\n    &::before {\n      box-sizing: inherit;\n    }\n  }\n}\n",".home {\r\n  &-section {\r\n    @include outer-container;\r\n  }\r\n\r\n  &-brands {\r\n    @include outer-container(70%);\r\n\r\n    &__item {\r\n      @include span-columns(12/9);\r\n\r\n      img {\r\n        width: 100%;\r\n        height: auto;\r\n      }\r\n    }\r\n  }\r\n\r\n  &-section__title {\r\n    font-size: .75rem;\r\n    font-weight: 700;\r\n    text-align: center;\r\n    text-transform: uppercase;\r\n    color: #fff;\r\n    @include display(flex);\r\n    @include align-items(center);\r\n\r\n    &:before,\r\n    &:after {\r\n      content: \"\";\r\n      border-bottom: 2px solid rgba(white, 0.5);\r\n      vertical-align: center;\r\n      flex: 1;\r\n    }\r\n\r\n    span {\r\n      @include align-self(center);\r\n      padding: 0 10px;\r\n    }\r\n  }\r\n\r\n  &-news {\r\n    @include outer-container(70%);\r\n    margin-bottom: 2rem;\r\n    background: rgba(black, 0.5);\r\n    padding: 10px;\r\n  }\r\n\r\n  &-brands {\r\n    margin-bottom: 2rem;\r\n  }\r\n\r\n  &-products {\r\n    margin-bottom: 2rem;\r\n  }\r\n\r\n  &-section-newsletter-n-local {\r\n    margin-bottom: 2rem;\r\n  }\r\n\r\n  &-stores {\r\n    text-align: center;\r\n    vertical-align: middle;\r\n\r\n    &__cta {\r\n      $color: #fff;\r\n      border: 2px solid $color;\r\n      color: $color;\r\n      display: inline-block;\r\n      font-weight: 700;\r\n      margin: auto;\r\n      padding: 1rem 2rem;\r\n      text-decoration: none;\r\n    }\r\n  }\r\n  &-newsletter {\r\n    &__headline,\r\n    &__subline {\r\n      margin-bottom: .75rem;\r\n    }\r\n    &__input {\r\n      background: white;\r\n      display: inline-block;\r\n      position: relative;\r\n      input {\r\n        background: transparent;\r\n        border: 0;\r\n        font-size: .75rem;\r\n        padding: 1rem 2rem;\r\n      }\r\n      .fa {\r\n        pointer-events: none;\r\n        position: relative;\r\n        left: -1rem;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n.home {\r\n  &-section {\r\n    &-newsletter-n-local {\r\n      @include row(table);\r\n  \r\n      .home-newsletter,\r\n      .home-stores {\r\n        @include span-columns(6);\r\n        @include pad(3rem);\r\n        background: #ccc;\r\n        font-size: .75rem;\r\n        text-transform: uppercase;\r\n      }\r\n    }\r\n  }\r\n  @include reset-display;\r\n}","@charset \"UTF-8\";\n\n/// Makes an element a outer container by centering it in the viewport, clearing its floats, and setting its `max-width`.\n/// Although optional, using `outer-container` is recommended. The mixin can be called on more than one element per page, as long as they are not nested.\n///\n/// @param {Number [unit]} $local-max-width [$max-width]\n///   Max width to be applied to the element. Can be a percentage or a measure.\n///\n/// @example scss - Usage\n///   .element {\n///     @include outer-container(100%);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     *zoom: 1;\n///     max-width: 100%;\n///     margin-left: auto;\n///     margin-right: auto;\n///   }\n///\n///   .element:before, .element:after {\n///     content: \" \";\n///     display: table;\n///   }\n///\n///   .element:after {\n///     clear: both;\n///   }\n\n@mixin outer-container($local-max-width: $max-width) {\n  @include clearfix;\n  max-width: $local-max-width;\n  margin: {\n    left: auto;\n    right: auto;\n  }\n}\n","@charset \"UTF-8\";\n\n/// Sets the relative width of a single grid column. The unit used should be the same one used to define `$gutter`. To learn more about `modular-scale()` see [Bourbon docs](http://bourbon.io/docs/#modular-scale). Set with a `!global` flag.\n///\n/// @type Number (Unit)\n\n$column: modular-scale(3, 1em, $golden) !default;\n\n/// Sets the relative width of a single grid gutter. The unit used should be the same one used to define `$column`. To learn more about `modular-scale()` see [Bourbon docs](http://bourbon.io/docs/#modular-scale). Set with the `!global` flag.\n///\n/// @type Number (Unit)\n\n$gutter: modular-scale(1, 1em, $golden) !default;\n\n/// Sets the total number of columns in the grid. Its value can be overridden inside a media query using the `media()` mixin. Set with the `!global` flag.\n///\n/// @type Number (Unitless)\n\n$grid-columns: 12 !default;\n\n/// Sets the max-width property of the element that includes `outer-container()`. Set with the `!global` flag.\n///\n/// @type Number (Unit)\n///\n$max-width: 1200px !default;\n\n/// When set to true, it sets the box-sizing property of all elements to `border-box`. Set with a `!global` flag.\n///\n/// @type Bool\n///\n/// @example css - CSS Output\n///   html {\n///     box-sizing: border-box; }\n///\n///   *, *::after, *::before {\n///     box-sizing: inherit;\n///   }\n\n$border-box-sizing: true !default;\n\n/// Sets the default [media feature](http://www.w3.org/TR/css3-mediaqueries/#media) that `media()` and `new-breakpoint()` revert to when only a breakpoint value is passed. Set with a `!global` flag.\n///\n/// @type String\n\n$default-feature: min-width; // Default @media feature for the breakpoint() mixin\n\n///Sets the default layout direction of the grid. Can be `LTR` or `RTL`. Set with a `!global` flag.\n///\n///@type String\n\n$default-layout-direction: LTR !default;\n","@charset \"UTF-8\";\n\n/// Provides an easy way to include a clearfix for containing floats.\n///\n/// @link http://cssmojo.com/latest_new_clearfix_so_far/\n///\n/// @example scss - Usage\n///   .element {\n///     @include clearfix;\n///   }\n///\n/// @example css - CSS Output\n///   .element::after {\n///     clear: both;\n///     content: \"\";\n///     display: table;\n///   }\n\n@mixin clearfix {\n  &::after {\n    clear: both;\n    content: \"\";\n    display: table;\n  }\n}\n","@charset \"UTF-8\";\n\n/// Specifies the number of columns an element should span. If the selector is nested the number of columns of its parent element should be passed as an argument as well.\n///\n/// @param {List} $span\n///   A list containing `$columns`, the unitless number of columns the element spans (required), and `$container-columns`, the number of columns the parent element spans (optional).\n///\n///   If only one value is passed, it is assumed that it's `$columns` and that that `$container-columns` is equal to `$grid-columns`, the total number of columns in the grid.\n///\n///   The values can be separated with any string such as `of`, `/`, etc.\n///\n///   `$columns` also accepts decimals for when it's necessary to break out of the standard grid. E.g. Passing `2.4` in a standard 12 column grid will divide the row into 5 columns.\n///\n/// @param {String} $display [block]\n///   Sets the display property of the element. By default it sets the display property of the element to `block`.\n///\n///   If passed `block-collapse`, it also removes the margin gutter by adding it to the element width.\n///\n///   If passed `table`, it sets the display property to `table-cell` and calculates the width of the element without taking gutters into consideration. The result does not align with the block-based grid.\n///\n/// @example scss - Usage\n///   .element {\n///     @include span-columns(6);\n///\n///    .nested-element {\n///      @include span-columns(2 of 6);\n///    }\n///  }\n///\n/// @example css - CSS Output\n///   .element {\n///     display: block;\n///     float: left;\n///     margin-right: 2.35765%;\n///     width: 48.82117%;\n///   }\n///\n///   .element:last-child {\n///     margin-right: 0;\n///   }\n///\n///   .element .nested-element {\n///     display: block;\n///     float: left;\n///     margin-right: 4.82916%;\n///     width: 30.11389%;\n///   }\n///\n///   .element .nested-element:last-child {\n///     margin-right: 0;\n///   }\n\n@mixin span-columns($span: $columns of $container-columns, $display: block) {\n  $columns: nth($span, 1);\n  $container-columns: container-span($span);\n\n  $parent-columns: get-parent-columns($container-columns) !global;\n\n  $direction: get-direction($layout-direction, $default-layout-direction);\n  $opposite-direction: get-opposite-direction($direction);\n\n  $display-table: is-display-table($container-display-table, $display);\n\n  @if $display-table  {\n    display: table-cell;\n    width: percentage($columns / $container-columns);\n  } @else {\n    float: #{$opposite-direction};\n\n    @if $display != no-display {\n      display: block;\n    }\n\n    @if $display == collapse {\n      @include -neat-warn(\"The 'collapse' argument will be deprecated. Use 'block-collapse' instead.\");\n    }\n\n    @if $display == collapse or $display == block-collapse {\n      width: flex-grid($columns, $container-columns) + flex-gutter($container-columns);\n\n      &:last-child {\n        width: flex-grid($columns, $container-columns);\n      }\n\n    } @else {\n      margin-#{$direction}: flex-gutter($container-columns);\n      width: flex-grid($columns, $container-columns);\n\n      &:last-child {\n        margin-#{$direction}: 0;\n      }\n    }\n  }\n}\n","$parent-columns: $grid-columns !default;\n$fg-column: $column;\n$fg-gutter: $gutter;\n$fg-max-columns: $grid-columns;\n$container-display-table: false !default;\n$layout-direction: LTR !default;\n\n@function flex-grid($columns, $container-columns: $fg-max-columns) {\n  $width: $columns * $fg-column + ($columns - 1) * $fg-gutter;\n  $container-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter;\n  @return percentage($width / $container-width);\n}\n\n@function flex-gutter($container-columns: $fg-max-columns, $gutter: $fg-gutter) {\n  $container-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter;\n  @return percentage($gutter / $container-width);\n}\n\n@function grid-width($n) {\n  @return $n * $gw-column + ($n - 1) * $gw-gutter;\n}\n\n@function get-parent-columns($columns) {\n  @if $columns != $grid-columns {\n    $parent-columns: $columns !global;\n  } @else {\n    $parent-columns: $grid-columns !global;\n  }\n\n  @return $parent-columns;\n}\n\n@function is-display-table($container-is-display-table, $display) {\n  @return $container-is-display-table == true or $display == table;\n}\n","// CSS3 Flexible Box Model and property defaults\n\n// Custom shorthand notation for flexbox\n@mixin box($orient: inline-axis, $pack: start, $align: stretch) {\n  @include display-box;\n  @include box-orient($orient);\n  @include box-pack($pack);\n  @include box-align($align);\n}\n\n@mixin display-box {\n  display: -webkit-box;\n  display: -moz-box;\n  display: -ms-flexbox; // IE 10\n  display: box;\n}\n\n@mixin box-orient($orient: inline-axis) {\n// horizontal|vertical|inline-axis|block-axis|inherit\n  @include prefixer(box-orient, $orient, webkit moz spec);\n}\n\n@mixin box-pack($pack: start) {\n// start|end|center|justify\n  @include prefixer(box-pack, $pack, webkit moz spec);\n  -ms-flex-pack: $pack; // IE 10\n}\n\n@mixin box-align($align: stretch) {\n// start|end|center|baseline|stretch\n  @include prefixer(box-align, $align, webkit moz spec);\n  -ms-flex-align: $align; // IE 10\n}\n\n@mixin box-direction($direction: normal) {\n// normal|reverse|inherit\n  @include prefixer(box-direction, $direction, webkit moz spec);\n  -ms-flex-direction: $direction; // IE 10\n}\n\n@mixin box-lines($lines: single) {\n// single|multiple\n  @include prefixer(box-lines, $lines, webkit moz spec);\n}\n\n@mixin box-ordinal-group($int: 1) {\n  @include prefixer(box-ordinal-group, $int, webkit moz spec);\n  -ms-flex-order: $int; // IE 10\n}\n\n@mixin box-flex($value: 0) {\n  @include prefixer(box-flex, $value, webkit moz spec);\n  -ms-flex: $value; // IE 10\n}\n\n@mixin box-flex-group($int: 1) {\n  @include prefixer(box-flex-group, $int, webkit moz spec);\n}\n\n// CSS3 Flexible Box Model and property defaults\n// Unified attributes for 2009, 2011, and 2012 flavours.\n\n// 2009 - display (box | inline-box)\n// 2011 - display (flexbox | inline-flexbox)\n// 2012 - display (flex | inline-flex)\n@mixin display($value) {\n// flex | inline-flex\n  @if $value == \"flex\" {\n    // 2009\n    display: -webkit-box;\n    display: -moz-box;\n    display: box;\n\n    // 2012\n    display: -webkit-flex;\n    display: -moz-flex;\n    display: -ms-flexbox; // 2011 (IE 10)\n    display: flex;\n  } @else if $value == \"inline-flex\" {\n    display: -webkit-inline-box;\n    display: -moz-inline-box;\n    display: inline-box;\n\n    display: -webkit-inline-flex;\n    display: -moz-inline-flex;\n    display: -ms-inline-flexbox;\n    display: inline-flex;\n  } @else {\n    display: $value;\n  }\n}\n\n// 2009 - box-flex (integer)\n// 2011 - flex (decimal | width decimal)\n// 2012 - flex (integer integer width)\n@mixin flex($value) {\n\n  // Grab flex-grow for older browsers.\n  $flex-grow: nth($value, 1);\n\n  // 2009\n  @include prefixer(box-flex, $flex-grow, webkit moz spec);\n\n  // 2011 (IE 10), 2012\n  @include prefixer(flex, $value, webkit moz ms spec);\n}\n\n// 2009 - box-orient ( horizontal | vertical | inline-axis | block-axis)\n//      - box-direction (normal | reverse)\n// 2011 - flex-direction (row | row-reverse | column | column-reverse)\n// 2012 - flex-direction (row | row-reverse | column | column-reverse)\n@mixin flex-direction($value: row) {\n\n  // Alt values.\n  $value-2009: $value;\n  $value-2011: $value;\n  $direction: normal;\n\n  @if $value == row {\n    $value-2009: horizontal;\n  } @else if $value == \"row-reverse\" {\n    $value-2009: horizontal;\n    $direction: reverse;\n  } @else if $value == column {\n    $value-2009: vertical;\n  } @else if $value == \"column-reverse\" {\n    $value-2009: vertical;\n    $direction: reverse;\n  }\n\n  // 2009\n  @include prefixer(box-orient, $value-2009, webkit moz spec);\n  @include prefixer(box-direction, $direction, webkit moz spec);\n\n  // 2012\n  @include prefixer(flex-direction, $value, webkit moz spec);\n\n  // 2011 (IE 10)\n  -ms-flex-direction: $value;\n}\n\n// 2009 - box-lines (single | multiple)\n// 2011 - flex-wrap (nowrap | wrap | wrap-reverse)\n// 2012 - flex-wrap (nowrap | wrap | wrap-reverse)\n@mixin flex-wrap($value: nowrap) {\n  // Alt values\n  $alt-value: $value;\n  @if $value == nowrap {\n    $alt-value: single;\n  } @else if $value == wrap {\n    $alt-value: multiple;\n  } @else if $value == \"wrap-reverse\" {\n    $alt-value: multiple;\n  }\n\n  @include prefixer(box-lines, $alt-value, webkit moz spec);\n  @include prefixer(flex-wrap, $value, webkit moz ms spec);\n}\n\n// 2009 - TODO: parse values into flex-direction/flex-wrap\n// 2011 - TODO: parse values into flex-direction/flex-wrap\n// 2012 - flex-flow (flex-direction || flex-wrap)\n@mixin flex-flow($value) {\n  @include prefixer(flex-flow, $value, webkit moz spec);\n}\n\n// 2009 - box-ordinal-group (integer)\n// 2011 - flex-order (integer)\n// 2012 - order (integer)\n@mixin order($int: 0) {\n  // 2009\n  @include prefixer(box-ordinal-group, $int, webkit moz spec);\n\n  // 2012\n  @include prefixer(order, $int, webkit moz spec);\n\n  // 2011 (IE 10)\n  -ms-flex-order: $int;\n}\n\n// 2012 - flex-grow (number)\n@mixin flex-grow($number: 0) {\n  @include prefixer(flex-grow, $number, webkit moz spec);\n  -ms-flex-positive: $number;\n}\n\n// 2012 - flex-shrink (number)\n@mixin flex-shrink($number: 1) {\n  @include prefixer(flex-shrink, $number, webkit moz spec);\n  -ms-flex-negative: $number;\n}\n\n// 2012 - flex-basis (number)\n@mixin flex-basis($width: auto) {\n  @include prefixer(flex-basis, $width, webkit moz spec);\n  -ms-flex-preferred-size: $width;\n}\n\n// 2009 - box-pack (start | end | center | justify)\n// 2011 - flex-pack (start | end | center | justify)\n// 2012 - justify-content (flex-start | flex-end | center | space-between | space-around)\n@mixin justify-content($value: flex-start) {\n\n  // Alt values.\n  $alt-value: $value;\n  @if $value == \"flex-start\" {\n    $alt-value: start;\n  } @else if $value == \"flex-end\" {\n    $alt-value: end;\n  } @else if $value == \"space-between\" {\n    $alt-value: justify;\n  } @else if $value == \"space-around\" {\n    $alt-value: distribute;\n  }\n\n  // 2009\n  @include prefixer(box-pack, $alt-value, webkit moz spec);\n\n  // 2012\n  @include prefixer(justify-content, $value, webkit moz ms o spec);\n\n  // 2011 (IE 10)\n  -ms-flex-pack: $alt-value;\n}\n\n// 2009 - box-align (start | end | center | baseline | stretch)\n// 2011 - flex-align (start | end | center | baseline | stretch)\n// 2012 - align-items (flex-start | flex-end | center | baseline | stretch)\n@mixin align-items($value: stretch) {\n\n  $alt-value: $value;\n\n  @if $value == \"flex-start\" {\n    $alt-value: start;\n  } @else if $value == \"flex-end\" {\n    $alt-value: end;\n  }\n\n  // 2009\n  @include prefixer(box-align, $alt-value, webkit moz spec);\n\n  // 2012\n  @include prefixer(align-items, $value, webkit moz ms o spec);\n\n  // 2011 (IE 10)\n  -ms-flex-align: $alt-value;\n}\n\n// 2011 - flex-item-align (auto | start | end | center | baseline | stretch)\n// 2012 - align-self (auto | flex-start | flex-end | center | baseline | stretch)\n@mixin align-self($value: auto) {\n\n  $value-2011: $value;\n  @if $value == \"flex-start\" {\n    $value-2011: start;\n  } @else if $value == \"flex-end\" {\n    $value-2011: end;\n  }\n\n  // 2012\n  @include prefixer(align-self, $value, webkit moz spec);\n\n  // 2011 (IE 10)\n  -ms-flex-item-align: $value-2011;\n}\n\n// 2011 - flex-line-pack (start | end | center | justify | distribute | stretch)\n// 2012 - align-content (flex-start | flex-end | center | space-between | space-around | stretch)\n@mixin align-content($value: stretch) {\n\n  $value-2011: $value;\n  @if $value == \"flex-start\" {\n    $value-2011: start;\n  } @else if $value == \"flex-end\" {\n    $value-2011: end;\n  } @else if $value == \"space-between\" {\n    $value-2011: justify;\n  } @else if $value == \"space-around\" {\n    $value-2011: distribute;\n  }\n\n  // 2012\n  @include prefixer(align-content, $value, webkit moz spec);\n\n  // 2011 (IE 10)\n  -ms-flex-line-pack: $value-2011;\n}\n","@charset \"UTF-8\";\n\n/// A mixin for generating vendor prefixes on non-standardized properties.\n///\n/// @param {String} $property\n///   Property to prefix\n///\n/// @param {*} $value\n///   Value to use\n///\n/// @param {List} $prefixes\n///   Prefixes to define\n///\n/// @example scss - Usage\n///   .element {\n///     @include prefixer(border-radius, 10px, webkit ms spec);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     -webkit-border-radius: 10px;\n///     -moz-border-radius: 10px;\n///     border-radius: 10px;\n///   }\n///\n/// @require {variable} $prefix-for-webkit\n/// @require {variable} $prefix-for-mozilla\n/// @require {variable} $prefix-for-microsoft\n/// @require {variable} $prefix-for-opera\n/// @require {variable} $prefix-for-spec\n\n@mixin prefixer($property, $value, $prefixes) {\n  @each $prefix in $prefixes {\n    @if $prefix == webkit {\n      @if $prefix-for-webkit {\n        -webkit-#{$property}: $value;\n      }\n    } @else if $prefix == moz {\n      @if $prefix-for-mozilla {\n        -moz-#{$property}: $value;\n      }\n    } @else if $prefix == ms {\n      @if $prefix-for-microsoft {\n        -ms-#{$property}: $value;\n      }\n    } @else if $prefix == o {\n      @if $prefix-for-opera {\n        -o-#{$property}: $value;\n      }\n    } @else if $prefix == spec {\n      @if $prefix-for-spec {\n        #{$property}: $value;\n      }\n    } @else  {\n      @warn \"Unrecognized prefix: #{$prefix}\";\n    }\n  }\n}\n\n@mixin disable-prefix-for-all() {\n  $prefix-for-webkit:    false !global;\n  $prefix-for-mozilla:   false !global;\n  $prefix-for-microsoft: false !global;\n  $prefix-for-opera:     false !global;\n  $prefix-for-spec:      false !global;\n}\n","@charset \"UTF-8\";\n\n/// Designates the element as a row of columns in the grid layout. It clears the floats on the element and sets its display property. Rows can't be nested, but there can be more than one row element—with different display properties—per layout.\n///\n/// @param {String} $display [default]\n///  Sets the display property of the element and the display context that will be used by its children. Can be `block` or `table`.\n///\n/// @param {String} $direction [$default-layout-direction]\n///  Sets the layout direction. Can be `LTR` (left-to-right) or `RTL` (right-to-left).\n///\n/// @example scss - Usage\n///  .element {\n///    @include row();\n///  }\n///\n/// @example css - CSS Output\n///  .element {\n///    *zoom: 1;\n///    display: block;\n///  }\n///\n/// .element:before, .element:after {\n///   content: \" \";\n///   display: table;\n/// }\n///\n/// .element:after {\n///   clear: both;\n/// }\n\n@mixin row($display: default, $direction: $default-layout-direction) {\n  @if $direction != $default-layout-direction {\n    @include -neat-warn(\"The $direction argument will be deprecated in future versions in favor of the direction(){...} mixin.\");\n  }\n\n  $layout-direction: $direction !global;\n\n  @if $display != default {\n    @include -neat-warn(\"The $display argument will be deprecated in future versions in favor of the display(){...} mixin.\");\n  }\n\n  @if $display == table {\n    display: table;\n    @include fill-parent;\n    table-layout: fixed;\n    $container-display-table: true !global;\n  } @else {\n    @include clearfix;\n    display: block;\n    $container-display-table: false !global;\n  }\n}\n","@charset \"UTF-8\";\n\n/// Forces the element to fill its parent container.\n///\n/// @example scss - Usage\n///   .element {\n///     @include fill-parent;\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     width: 100%;\n///     box-sizing: border-box;\n///   }\n\n@mixin fill-parent() {\n  width: 100%;\n\n  @if $border-box-sizing == false {\n    box-sizing: border-box;\n  }\n}\n","@charset \"UTF-8\";\n\n/// Adds padding to the element.\n///\n/// @param {List} $padding [flex-gutter()]\n///   A list of padding value(s) to use. Passing `default` in the list will result in using the gutter width as a padding value.\n///\n/// @example scss - Usage\n///   .element {\n///     @include pad(30px -20px 10px default);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     padding: 30px -20px 10px 2.35765%;\n///   }\n\n@mixin pad($padding: flex-gutter()) {\n  $padding-list: null;\n  @each $value in $padding {\n    $value: if($value == 'default', flex-gutter(), $value);\n    $padding-list: join($padding-list, $value);\n  }\n  padding: $padding-list;\n}\n",".owl-carousel {\r\n\r\n  .owl-nav {\r\n    font-size: 2rem;\r\n    position: absolute;\r\n    right: 0;\r\n    top: 50%;\r\n    left: 0;\r\n    color: rgba(white, .5);\r\n  }\r\n  .owl-prev,\r\n  .owl-next {\r\n    @include transform(translate3d(0, -100%, 0));\r\n  }\r\n  .owl-prev {\r\n    position: absolute;\r\n    left: 0;\r\n    margin-left: -1rem;\r\n  }\r\n\r\n  .owl-next {\r\n    position: absolute;\r\n    right: 0;\r\n    margin-right: -1rem;\r\n  }\r\n}\r\n","#footer {\r\n  @include outer-container;\r\n  color: #ccc;\r\n  padding: 1rem;\r\n  text-transform: uppercase;\r\n  font-size: .75rem;\r\n\r\n  a {\r\n    color: #ccc;\r\n  }\r\n\r\n  .section {\r\n    @include span-columns(12/5);\r\n    @include omega(5n);\r\n    @include ellipsis;\r\n    &--contact {\r\n      ul {\r\n        margin-bottom: 1rem;\r\n      }\r\n    }\r\n    &__title {\r\n      margin-bottom: .75rem;\r\n    }\r\n  }\r\n  ul {\r\n    list-style-type: none;\r\n    padding: 0;\r\n    margin: 0;\r\n  }\r\n  li {\r\n    padding: 0;\r\n    margin: 0;\r\n    line-height: 1.5rem;\r\n  }\r\n  a {\r\n    text-decoration: none;\r\n  }\r\n}\r\n.footer-background {\r\n  background: #333;\r\n}","@charset \"UTF-8\";\n\n/// Truncates text and adds an ellipsis to represent overflow.\n///\n/// @param {Number} $width [100%]\n///   Max-width for the string to respect before being truncated\n///\n/// @example scss - Usage\n///   .element {\n///     @include ellipsis;\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     display: inline-block;\n///     max-width: 100%;\n///     overflow: hidden;\n///     text-overflow: ellipsis;\n///     white-space: nowrap;\n///     word-wrap: normal;\n///   }\n\n@mixin ellipsis($width: 100%) {\n  display: inline-block;\n  max-width: $width;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  word-wrap: normal;\n}\n","@charset \"UTF-8\";\n\n/// Removes the element's gutter margin, regardless of its position in the grid hierarchy or display property. It can target a specific element, or every `nth-child` occurrence. Works only with `block` layouts.\n///\n/// @param {List} $query [block]\n///   List of arguments. Supported arguments are `nth-child` selectors (targets a specific pseudo element) and `auto` (targets `last-child`).\n///\n///   When passed an `nth-child` argument of type `*n` with `block` display, the omega mixin automatically adds a clear to the `*n+1` th element. Note that composite arguments such as `2n+1` do not support this feature.\n///\n///   **Deprecation warning**: The omega mixin will no longer take a `$direction` argument. To change the layout direction, use `row($direction)` or set `$default-layout-direction` instead.\n///\n/// @example scss - Usage\n///   .element {\n///     @include omega;\n///   }\n///\n///   .nth-element {\n///     @include omega(4n);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     margin-right: 0;\n///   }\n///\n///   .nth-element:nth-child(4n) {\n///     margin-right: 0;\n///   }\n///\n///   .nth-element:nth-child(4n+1) {\n///     clear: left;\n///   }\n\n@mixin omega($query: block, $direction: default) {\n  $table: belongs-to(table, $query);\n  $auto: belongs-to(auto, $query);\n\n  @if $direction != default {\n    @include -neat-warn(\"The omega mixin will no longer take a $direction argument. To change the layout direction, use the direction(){...} mixin.\");\n  } @else {\n    $direction: get-direction($layout-direction, $default-layout-direction);\n  }\n\n  @if $table {\n    @include -neat-warn(\"The omega mixin no longer removes padding in table layouts.\");\n  }\n\n  @if length($query) == 1 {\n    @if $auto {\n      &:last-child {\n        margin-#{$direction}: 0;\n      }\n    }\n\n    @else if contains-display-value($query) and $table == false {\n      margin-#{$direction}: 0;\n    }\n\n    @else {\n      @include nth-child($query, $direction);\n    }\n  } @else if length($query) == 2 {\n    @if $auto {\n      &:last-child {\n        margin-#{$direction}: 0;\n      }\n    } @else {\n      @include nth-child(nth($query, 1), $direction);\n    }\n  } @else {\n    @include -neat-warn(\"Too many arguments passed to the omega() mixin.\");\n  }\n}\n\n@mixin nth-child($query, $direction) {\n  $opposite-direction: get-opposite-direction($direction);\n\n  &:nth-child(#{$query}) {\n    margin-#{$direction}: 0;\n  }\n\n  @if type-of($query) == number and unit($query) == \"n\" {\n    &:nth-child(#{$query}+1) {\n      clear: $opposite-direction;\n    }\n  }\n}\n","// Not function for Libsass compatibility\n// https://github.com/sass/libsass/issues/368\n@function is-not($value) {\n  @return if($value, false, true);\n}\n\n// Checks if a number is even\n@function is-even($int) {\n  @return $int % 2 == 0;\n}\n\n// Checks if an element belongs to a list or not\n@function belongs-to($tested-item, $list) {\n  @return is-not(not-belongs-to($tested-item, $list));\n}\n\n@function not-belongs-to($tested-item, $list) {\n  @return is-not(index($list, $tested-item));\n}\n\n// Contains display value\n@function contains-display-value($query) {\n  @return belongs-to(table, $query)\n       or belongs-to(block, $query)\n       or belongs-to(inline-block, $query)\n       or belongs-to(inline, $query);\n}\n\n// Parses the first argument of span-columns()\n@function container-span($span: $span) {\n  @if length($span) == 3 {\n    $container-columns: nth($span, 3);\n    @return $container-columns;\n  } @else if length($span) == 2 {\n    $container-columns: nth($span, 2);\n    @return $container-columns;\n  }\n\n  @return $grid-columns;\n}\n\n@function container-shift($shift: $shift) {\n  $parent-columns: $grid-columns !default !global;\n\n  @if length($shift) == 3 {\n    $container-columns: nth($shift, 3);\n    @return $container-columns;\n  } @else if length($shift) == 2 {\n    $container-columns: nth($shift, 2);\n    @return $container-columns;\n  }\n\n  @return $parent-columns;\n}\n\n// Generates a striped background\n@function gradient-stops($grid-columns, $color: $visual-grid-color) {\n  $transparent: transparent;\n\n  $column-width: flex-grid(1, $grid-columns);\n  $gutter-width: flex-gutter($grid-columns);\n  $column-offset: $column-width;\n\n  $values: ($transparent 0, $color 0);\n\n  @for $i from 1 to $grid-columns*2 {\n    @if is-even($i) {\n      $values: append($values, $transparent $column-offset, comma);\n      $values: append($values, $color $column-offset, comma);\n      $column-offset: $column-offset + $column-width;\n    } @else {\n      $values: append($values, $color $column-offset, comma);\n      $values: append($values, $transparent $column-offset, comma);\n      $column-offset: $column-offset + $gutter-width;\n    }\n  }\n\n  @return $values;\n}\n\n// Layout direction\n@function get-direction($layout, $default) {\n  $direction: null;\n\n  @if to-upper-case($layout) == \"LTR\" or to-upper-case($layout) == \"RTL\" {\n    $direction: direction-from-layout($layout);\n  } @else {\n    $direction: direction-from-layout($default);\n  }\n\n  @return $direction;\n}\n\n@function direction-from-layout($layout) {\n  $direction: null;\n\n  @if to-upper-case($layout) == \"LTR\" {\n    $direction: right;\n  } @else {\n    $direction: left;\n  }\n\n  @return $direction;\n}\n\n@function get-opposite-direction($direction) {\n  $opposite-direction: left;\n\n  @if $direction == \"left\" {\n    $opposite-direction: right;\n  }\n\n  @return $opposite-direction;\n}\n",".product-displayer {\r\n  @include span-columns(6);\r\n  @include pad(0);\r\n  background: #ccc;\r\n  text-align: center;\r\n  &__view {\r\n    background-color: purple;\r\n    display: inline-block;\r\n    line-height: 0;\r\n    margin: 0 auto;\r\n  }\r\n\r\n  &__thumbnails {\r\n    @include outer-container;\r\n  }\r\n\r\n}","@import 'product-displayer';\r\n\r\n.mk-catalog {\r\n  @include outer-container;\r\n  &__categories {\r\n    background: $dark;\r\n    @include span-columns(3);\r\n    font-size: .75rem;\r\n    ul {\r\n      list-style-type: none;\r\n      padding: 0;\r\n      margin: 0;\r\n    }\r\n    li {\r\n      a {\r\n        color: $light-gray;\r\n        text-decoration: none;\r\n        padding: .5rem 1rem;\r\n        display: inline-block;\r\n        width: 100%;\r\n      }\r\n    }\r\n  }\r\n\r\n  &__products {\r\n    @include span-columns(9);\r\n    margin: 0 auto;\r\n\r\n    .productBox {\r\n      @include span-columns(4);\r\n      @include omega(2n+1);\r\n      margin-bottom: 2rem;\r\n    }\r\n  }\r\n}\r\n\r\n.mk-paginator {\r\n  @include outer-container;\r\n  text-align: right;\r\n  background: #fff;\r\n  padding: .5rem 1rem;\r\n  font-size: .75rem;\r\n  margin-bottom: 2rem;\r\n  color: $light-gray;\r\n\r\n  a {\r\n    text-decoration: none;\r\n    color: $light-gray;\r\n    padding: .5rem;\r\n  }\r\n  .disabled {\r\n    display: none;\r\n  }\r\n  .active {\r\n    font-weight: 700;\r\n    padding: .5rem;\r\n    color: $gray;\r\n  }\r\n\r\n  &__amount {\r\n    @display: inline-block;\r\n  }\r\n\r\n  ul, li {\r\n    display: inline-block;\r\n    list-style-type: none;\r\n    padding: 0;\r\n    margin: 0;\r\n  }\r\n}\r\n.mk-product-page {\r\n  @include span-columns(9);\r\n  background: #fff;\r\n  margin-bottom: 2rem;\r\n}","@import 'node_modules/bourbon/app/assets/stylesheets/bourbon';\n@import 'node_modules/bourbon-neat/app/assets/stylesheets/neat';\n$dark: #1e1e1c;\n$gray: #5a5a5a;\n$light-gray: #919191;\n\n@import 'home';\n@import 'carousel';\n@import 'footer';\n@import 'catalog';\n@import 'checkout';\n\nbody {\n  background: #000 url('/images/woods.jpg') repeat-y;\n  background-size: 100%;\n}\n\n.news {\n  &__box {\n    font-size: .75rem;\n    text-align: center;\n    background: #fff;\n    @include pad(10px);\n\n    &__picture {\n      margin-bottom: .5rem;\n      display: inline-block;\n      width: 100%;\n    }\n\n    &__picture img {\n      height: auto;\n      width: 100%;\n    }\n\n    &__title {\n      @include ellipsis;\n      color: $gray;\n      text-transform: uppercase;\n      white-space: nowrap;\n      font-weight: 700;\n      display: inline-block;\n      width: 100%;\n    }\n\n    &__subtitle {\n      @include ellipsis;\n      color: $light-gray;\n      white-space: nowrap;\n      display: inline-block;\n    }\n  }\n}\n\n.productBox {\n  $background: #fff;\n  background: $background;\n  display: inline-block;\n  font-size: .75rem;\n  padding-bottom: 1rem;\n  text-align: center;\n  width: 100%;\n\n  &__link {\n    display: inline-block;\n    width: 100%;\n  }\n\n  & &__image {\n    display: inline-block;\n    height: auto;\n    margin: 0;\n    width: 100%;\n    margin-bottom: .5rem;\n  }\n\n  &__title {\n    @include ellipsis;\n    color: $gray;\n    display: inline-block;\n    font-weight: 700;\n    text-transform: uppercase;\n    white-space: nowrap;\n    width: 100%;\n  }\n\n  &__price {\n    color: $light-gray;\n    font-weight: 700;\n  }\n}\n.markshop-logo {\n  text-align: center;\n  background: transparent url('/images/header.jpg') no-repeat;\n  background-position: center center;\n  background-size: cover;\n  img {\n    position: relative;\n    width: 18rem;\n    height: auto;\n    line-height: 0;\n    bottom: -0.5rem;\n  }\n}\n#header {\n  @include pad;\n  background: $dark;\n  color: #787878;\n  width: 100%;\n  font-size: .75rem;\n  padding-top: 0;\n  padding-bottom: 0;\n  margin-bottom: 2rem;\n  a {\n    text-decoration: none;\n  }\n}\n\n.topnav {\n  @include ellipsis;\n  width: 100%;\n  text-align: justify;\n\n  &__account,\n  &__followus {\n    @include span-columns(3);\n    @include pad(0);\n\n  }\n\n  &__followus{\n    &__link {\n      padding: 0 .5rem;\n      font-size: 1rem;\n      line-height: .75rem;\n      color: #787878;\n    }\n  }\n\n  &__account {\n    @include omega;\n    text-align: right;\n    text-transform: uppercase;\n    &__link {\n      font-weight: 700;\n      display: inline-block;\n      color: #787878;\n      padding: 0 .5rem;\n    }\n  }\n\n  &__pages {\n    @include span-columns(6);\n    @include pad(0);\n    text-align: center;\n    text-transform: uppercase;\n    &__link {\n      color: #fff;\n      font-weight: 700;\n      display: inline-block;\n      padding: 0 .5rem;\n    }\n  }\n\n  &__list {\n    display: inline-block;\n    list-style-type: none;\n    white-space: nowrap;\n  }\n\n  &__item {\n    display: inline-block;\n  }\n}\n",".checkout-page {\r\n  background: #fff;\r\n  @include outer-container;\r\n  & table {\r\n    margin:auto;\r\n    & thead th{\r\n      text-transform: uppercase;\r\n      font-weight: normal;\r\n      padding: 1rem;\r\n    }\r\n  }\r\n  td {\r\n    padding: 1rem;\r\n    border-bottom: 1px solid grey;\r\n  }\r\n  &__total {\r\n    padding: 1rem;\r\n    text-align: right;\r\n    font-size: 2rem;\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}